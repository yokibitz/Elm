var _user$project$Main$display = F2(
	function (name, value) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ==> ',
							_elm_lang$core$Basics$toString(value)))),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$depth = function (tree) {
	var _p0 = tree;
	if (_p0.ctor === 'Empty') {
		return 0;
	} else {
		return 1 + A2(
			_elm_lang$core$Basics$max,
			_user$project$Main$depth(_p0._1),
			_user$project$Main$depth(_p0._2));
	}
};
var _user$project$Main$Node = F3(
	function (a, b, c) {
		return {ctor: 'Node', _0: a, _1: b, _2: c};
	});
var _user$project$Main$Empty = {ctor: 'Empty'};
var _user$project$Main$empty = _user$project$Main$Empty;
var _user$project$Main$singleton = function (v) {
	return A3(_user$project$Main$Node, v, _user$project$Main$Empty, _user$project$Main$Empty);
};
var _user$project$Main$insert = F2(
	function (x, tree) {
		var _p1 = tree;
		if (_p1.ctor === 'Empty') {
			return _user$project$Main$singleton(x);
		} else {
			var _p4 = _p1._0;
			var _p3 = _p1._2;
			var _p2 = _p1._1;
			return (_elm_lang$core$Native_Utils.cmp(x, _p4) > 0) ? A3(
				_user$project$Main$Node,
				_p4,
				_p2,
				A2(_user$project$Main$insert, x, _p3)) : ((_elm_lang$core$Native_Utils.cmp(x, _p4) < 0) ? A3(
				_user$project$Main$Node,
				_p4,
				A2(_user$project$Main$insert, x, _p2),
				_p3) : tree);
		}
	});
var _user$project$Main$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _user$project$Main$insert, _user$project$Main$empty, xs);
};
var _user$project$Main$deepTree = _user$project$Main$fromList(
	{
		ctor: '::',
		_0: 1,
		_1: {
			ctor: '::',
			_0: 2,
			_1: {
				ctor: '::',
				_0: 3,
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$Main$niceTree = _user$project$Main$fromList(
	{
		ctor: '::',
		_0: 2,
		_1: {
			ctor: '::',
			_0: 1,
			_1: {
				ctor: '::',
				_0: 3,
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$Main$map = F2(
	function (f, tree) {
		var _p5 = tree;
		if (_p5.ctor === 'Empty') {
			return _user$project$Main$Empty;
		} else {
			return A3(
				_user$project$Main$Node,
				f(_p5._0),
				A2(_user$project$Main$map, f, _p5._1),
				A2(_user$project$Main$map, f, _p5._2));
		}
	});
var _user$project$Main$main = _elm_lang$virtual_dom$Native_VirtualDom.staticProgram(
	A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'font-family', _1: 'monospace'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_user$project$Main$display,
				'depth deepTree',
				_user$project$Main$depth(_user$project$Main$deepTree)),
			_1: {
				ctor: '::',
				_0: A2(
					_user$project$Main$display,
					'depth niceTree',
					_user$project$Main$depth(_user$project$Main$niceTree)),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Main$display,
						'incremented',
						A2(
							_user$project$Main$map,
							function (n) {
								return n + 1;
							},
							_user$project$Main$niceTree)),
					_1: {ctor: '[]'}
				}
			}
		}));
