var _user$project$Main$onChange = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$decodeGifUrl = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'data',
		_1: {
			ctor: '::',
			_0: 'image_url',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {topic: a, gifUrl: b, errorMessage: c};
	});
var _user$project$Main$NewGif = function (a) {
	return {ctor: 'NewGif', _0: a};
};
var _user$project$Main$getRandomGif = function (topic) {
	var url = A2(_elm_lang$core$Basics_ops['++'], 'https://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=', topic);
	var request = A2(_elm_lang$http$Http$get, url, _user$project$Main$decodeGifUrl);
	return A2(_elm_lang$http$Http$send, _user$project$Main$NewGif, request);
};
var _user$project$Main$init = function (topic) {
	return {
		ctor: '_Tuple2',
		_0: A3(_user$project$Main$Model, topic, 'waiting.gif', ''),
		_1: _user$project$Main$getRandomGif(topic)
	};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'MorePlease':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{errorMessage: ''}),
					_1: _user$project$Main$getRandomGif(model.topic)
				};
			case 'NewTopic':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{topic: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{gifUrl: _p0._0._0, errorMessage: ''}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								errorMessage: _elm_lang$core$Basics$toString(_p0._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$Main$NewTopic = function (a) {
	return {ctor: 'NewTopic', _0: a};
};
var _user$project$Main$MorePlease = {ctor: 'MorePlease'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(model.topic),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$select,
					{
						ctor: '::',
						_0: _user$project$Main$onChange(_user$project$Main$NewTopic),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$selected(true),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$option,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('cats'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$option,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('dogs'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$option,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('cakes'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$MorePlease),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('More please!!!'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$img,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src(model.gifUrl),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(model.errorMessage),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: _user$project$Main$init('cats'),
		view: _user$project$Main$view,
		update: _user$project$Main$update,
		subscriptions: _user$project$Main$subscriptions
	})();
